apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eks-medium-spot-cluster
  region: us-east-1
  version: "1.19"

managedNodeGroups:
  - name: eks-medium-on-demand-node-group
    instanceType: t2.micro
    instancePrefix: managed-nodes
    minSize: 1
    desiredCapacity: 1
    maxSize: 8
    # availabilityZones: ["us-east-1a", "us-east-1b", "us-east-1c", "us-east-1d", "us-east-1e", "us-east-1f"]
    volumeSize: 10
    volumeType: gp2
    volumeEncrypted: true
    labels:
      nodegroup-type: on-demand
      node-type: on-demand
    tags:
      k8s.io/cluster-autoscaler/node-template/label/node-type: on-demand
      k8s.io/cluster-autoscaler/node-template/label/nodegroup-type: on-demand
    iam:
      withAddonPolicies:
        autoScaler: true
  - name: eks-medium-spot-node-group
    spot: true
    minSize: 0
    maxSize: 5
    volumeSize: 10
    volumeType: gp2
    volumeEncrypted: true
    instanceType: m4.large
    instancePrefix: spot-nodes
    labels:
      lifecycle: Ec2Spot
      aws.amazon.com/spot: "true"
      nodegroup-type: spot
      node-type: spot
    tags:
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: Ec2Spot
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/node-type: spot
      k8s.io/cluster-autoscaler/node-template/label/nodegroup-type: spot
      nodegroup-role: worker
    # availabilityZones: ["us-east-1a", "us-east-1b", "us-east-1c", "us-east-1d", "us-east-1e", "us-east-1f"]
    iam:
      withAddonPolicies:
        autoScaler: true
